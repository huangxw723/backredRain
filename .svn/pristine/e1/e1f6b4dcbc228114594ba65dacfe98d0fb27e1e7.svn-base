package com.aoshi.service.manage.yp;

import com.aoshi.common.asenum.ApiParam;
import com.aoshi.common.asenum.OperaEnum;
import com.aoshi.controller.base.BaseController;
import com.aoshi.dao.AsAttachmentMapper;
import com.aoshi.dao.AsUserMapper;
import com.aoshi.dao.AsYpSysMessageMapper;
import com.aoshi.dao.AsYpSysMessageRecordMapper;
import com.aoshi.domain.AsAttachment;
import com.aoshi.domain.AsShopPic;
import com.aoshi.domain.AsYpSysMessage;
import com.aoshi.domain.AsYpSysMessageRecord;
import com.aoshi.entity.R;
import com.aoshi.resolver.ValidatorBreakException;
import com.aoshi.service.base.AsBaseService;
import com.aoshi.util.*;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;
import org.omg.PortableInterceptor.SUCCESSFUL;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 * 后台 [消息] Service
 * 
 * @author yangyanchao
 * @date 2016年10月18日
 */
@Service
public class MessageService extends AsBaseService {

	private final static String PAGE_PATH = "manage/yp/message/";

	@Autowired
	private AsUserMapper asUserMapper;

	@Autowired
	private AsYpSysMessageMapper asYpSysMessageMapper;

	@Autowired
	private AsYpSysMessageRecordMapper asYpSysMessageRecordMapper;

	@Autowired
	private AsAttachmentMapper attachmentMapper;

	/**
	 * 页面跳转控制
	 *
	 * @param c
	 * @return
	 * @author yangyanchao
	 * @date 2016年10月18日
	 */
	public Object page(BaseController c) {

		initialized(c);

		OperaEnum ACTION = OperaEnum.get(pd
				.getParaForPositiveInteger(ApiParam.ACTION));

		switch (ACTION) {

			case ADD:
				break;

			case QUERY:

				int sysMessageId = pd.getParaForPositiveInteger("sysMessageId");

				AsYpSysMessageRecord record = (AsYpSysMessageRecord) asYpSysMessageRecordMapper
						.findByMsgId(Conditions.newInstance()
								.putData("sysMessageId", sysMessageId)
								.putData("userId", getUser().getNewUserId()));
				if (record == null) {
					record = new AsYpSysMessageRecord();
					String userId = getUser().getNewUserId();
					record.setCreateTime(CommonUtils.getCurDate());
					record.setSysMessageId(sysMessageId);
					record.setUserId(Integer.parseInt(userId));
					record.setStatus(0);
					operaFlag = asYpSysMessageRecordMapper.insertSelective(record) == 1;
					ValidatorBreakException.NOT_TRUE(operaFlag);
				} else {

					int status = record.getStatus();
					ValidatorBreakException.NOT_TRUE(status == 0);
				}

				AsYpSysMessage message = asYpSysMessageMapper
						.selectByPrimaryKey(sysMessageId);
				ValidatorBreakException.NOT_NULL(message, 1001, "系统繁忙", 1);
				List <AsAttachment> achment = attachmentMapper.queryAsAttachmentBysysMessageId(sysMessageId);
				addViewData("pd", message);
				addViewData("achment", achment);
				break;

			default:
				ValidatorBreakException.NOT_NULL(null, 1001, "系统繁忙", 1);
		}

		addViewData("action", ACTION.getId());

		return renderView(PAGE_PATH + "save");
	}

	/**
	 * 编辑消息
	 *
	 * @param c
	 * @return
	 * @author yangyanchao
	 * @date 2016年10月18日
	 */
	public Object opera(BaseController c) {

		initialized(c);

		OperaEnum ACTION = OperaEnum.get(pd
				.getParaForPositiveInteger(ApiParam.ACTION));

		switch (ACTION) {

			case ADD:

				String title = pd.getParaForString("title");
				String descp = pd.getParaForString("descp");

				Conditions user = (Conditions) asUserMapper
						.findBySysUserId(getUser().getUSER_ID());
				ValidatorBreakException.NOT_NULL(user);

				// 添加消息记录
				AsYpSysMessage message = new AsYpSysMessage();
				message.setCreateTime(CommonUtils.getCurDate());
				message.setDescp(descp);
				message.setTitle(title);
				message.setSendUserId(user.getInt("userId"));
				operaFlag = asYpSysMessageMapper.insertSelective(message) == 1;
				ValidatorBreakException.NOT_TRUE(operaFlag);

				// 添加发布者已读记录
				int messageId = message.getSysMessageId();
				AsYpSysMessageRecord messageRecord = new AsYpSysMessageRecord();
				messageRecord.setSysMessageId(messageId);
				messageRecord.setUserId(user.getInt("userId"));
				messageRecord.setCreateTime(CommonUtils.getCurDate());
				operaFlag = asYpSysMessageRecordMapper
						.insertSelective(messageRecord) == 1;
				ValidatorBreakException.NOT_TRUE(operaFlag);

				break;

			case DELETE:

				int sysMessageId = pd.getParaForPositiveInteger("sysMessageId");
				AsYpSysMessageRecord record = (AsYpSysMessageRecord) asYpSysMessageRecordMapper
						.findByMsgId(Conditions.newInstance()
								.putData("sysMessageId", sysMessageId)
								.putData("userId", getUser().getNewUserId()));
				if (record == null) {
					record = new AsYpSysMessageRecord();
					String userId = getUser().getNewUserId();
					record.setCreateTime(CommonUtils.getCurDate());
					record.setSysMessageId(sysMessageId);
					record.setUserId(Integer.parseInt(userId));
					record.setStatus(1);
					operaFlag = asYpSysMessageRecordMapper.insertSelective(record) == 1;
					ValidatorBreakException.NOT_TRUE(operaFlag);
				} else {

					int status = record.getStatus();
					ValidatorBreakException.NOT_TRUE(status == 0);
					record.setStatus(1);
					operaFlag = asYpSysMessageRecordMapper
							.updateByPrimaryKeySelective(record) == 1;
					ValidatorBreakException.NOT_TRUE(operaFlag);
				}

				break;

			default:
				ValidatorBreakException.NOT_NULL(null);
		}

		return renderSuccess();
	}

	/**
	 * 查询所有消息 后台菜单权限用
	 *
	 * @param c
	 * @return
	 * @author yangyanchao
	 * @date 2016年10月24日
	 */
	public Object getAllMessageList(BaseController c) {

		initialized(c);

		String userId = getUser().getNewUserId();

		pd.put("userId", userId);
		List <Object> msgList = pageQueryModule(asYpSysMessageMapper,
				"getAllMessageList", true);

		addViewData("list", msgList);

		return renderView(PAGE_PATH + "listAll");
	}

	/**
	 * 查询所有消息 所有用户可以使用
	 *
	 * @return
	 * @author yangyanchao
	 * @date 2016年10月24日
	 */
	public Object getAllMessageListAll(BaseController c) {

		initialized(c);

		String userId = getUser().getNewUserId();

		pd.put("userId", userId);
		List <Object> msgList = pageQueryModule(asYpSysMessageMapper,
				"getAllMessageList", true);

		//权限控制
		if (StringUtils.isNotBlank(getUser().getROLE_ID())) {
			addViewData("roleId", getUser().getROLE_ID().equals("1") ? "1" : "0");
		}
		addViewData("list", msgList);

		return renderView(PAGE_PATH + "messageListAll");
	}

	/**
	 * 保存
	 *
	 *
	 */
	public Object saveMessage(MultipartFile[] files, String descp, String title) {
		Conditions user = (Conditions) asUserMapper
				.findBySysUserId(getUser().getUSER_ID());
		ValidatorBreakException.NOT_NULL(user);

		// 添加消息记录
		AsYpSysMessage message = new AsYpSysMessage();
		message.setCreateTime(CommonUtils.getCurDate());
		message.setDescp(descp);
		message.setTitle(title);
		message.setSendUserId(user.getInt("userId"));
		operaFlag = asYpSysMessageMapper.insertSelective(message) == 1;
		ValidatorBreakException.NOT_TRUE(operaFlag);

		//多附件上传
		imgUpload(files, message.getSysMessageId());

		// 添加发布者已读记录
		int messageId = message.getSysMessageId();
		AsYpSysMessageRecord messageRecord = new AsYpSysMessageRecord();
		messageRecord.setSysMessageId(messageId);
		messageRecord.setUserId(user.getInt("userId"));
		messageRecord.setCreateTime(CommonUtils.getCurDate());
		operaFlag = asYpSysMessageRecordMapper
				.insertSelective(messageRecord) == 1;
		ValidatorBreakException.NOT_TRUE(operaFlag);
		return renderSuccess();
	}

	private void imgUpload(MultipartFile[] files, Integer sysMessageId) {

		String ftpFile = "";
		String ftpDir = Const.SHOPMAINPICFILEPATHIMG;
		for (int j = 0; j < files.length; j++) {
		if (!StringUtils.isEmpty(files[j].getOriginalFilename())) {
		ftpFile = files[j].getOriginalFilename();
		try {
		String newFilename = new Date().getTime() + ftpFile.substring(ftpFile.lastIndexOf("."));
		boolean flag = ftpUpload(files[j].getBytes(), newFilename, ftpDir);
		if (flag) {
			AsAttachment attachment = new AsAttachment();
			attachment.setAttachmentName(ftpFile);
			attachment.setItemId(sysMessageId);
			attachment.setAttachmentUrl(ftpDir + "/" + newFilename);
			attachmentMapper.insertSelective(attachment);
		}
		} catch (IOException e) {
			e.printStackTrace();
		}
		}
		}
	}

	/**
	 * 上传
	 */
	private boolean ftpUpload(byte[] bytes, String ftpFile, String ftpDir) {
		String path = Const.FILEPATHIMGDIR + ftpDir;
		FtpConManager ftpConManager = FtpConManager.getInstance();
		try {
			ftpConManager.login(PropertyUtils.getFTP_URL(),
					PropertyUtils.getFTP_USERNAME(),
					PropertyUtils.getFTP_PASS());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ftpConManager.uploadFileByInputStream(new ByteArrayInputStream(
				bytes), path, ftpFile);
	}
	/**
	 * 下载
	 */
	public Boolean downFile(String itemId) throws IOException {
		FTPClient ftpClient = new FTPClient();
		boolean result = false;
		String remotePath = "", fileName = null, localPath = null;

		AsAttachment ttachment = attachmentMapper.selectByPrimaryKey(Integer.parseInt(itemId));
		remotePath = Const.FILEPATHIMGDIR+ttachment.getAttachmentUrl().substring(0, ttachment.getAttachmentUrl().lastIndexOf("/"));
		fileName = ttachment.getAttachmentUrl().substring(ttachment.getAttachmentUrl().lastIndexOf("/")+1,ttachment.getAttachmentUrl().length());
		boolean flag = false;

		if (ftpClient != null) {
			try {
				ftpClient.connect(PropertyUtils.getFTP_URL());
				ftpClient.login(PropertyUtils.getFTP_USERNAME(), PropertyUtils.getFTP_PASS());
				ftpClient.enterLocalPassiveMode();
				ftpClient.setBufferSize(1024);
				// 设置文件类型（二进制）
				ftpClient.changeWorkingDirectory("/ftpdir/ascmMall/shop/attachmentUrl");
				ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);
				String storPath="F://"+fileName;
				result = ftpClient.retrieveFile(fileName, new FileOutputStream(storPath));
			} catch (NumberFormatException e) {
				throw e;
			} catch (FileNotFoundException e) {
				throw new FileNotFoundException();
			} catch (IOException e) {
				throw new IOException(e);
			} finally {
				try {
					ftpClient.disconnect();
				} catch (IOException e) {
					throw new RuntimeException("关闭FTP连接发生异常！", e);
				}
			}
		}
		return result;
	}

	public int operDeleFile(Integer id) {
		return attachmentMapper.deleteByPrimaryKey(id);

	}
}