package com.aoshi.service.manage.yp;

import com.aoshi.common.asenum.ApiParam;
import com.aoshi.common.asenum.OperaEnum;
import com.aoshi.controller.base.BaseController;
import com.aoshi.dao.AsUserMapper;
import com.aoshi.dao.AsYpSysMessageMapper;
import com.aoshi.dao.AsYpSysMessageRecordMapper;
import com.aoshi.domain.AsYpSysMessage;
import com.aoshi.domain.AsYpSysMessageRecord;
import com.aoshi.resolver.ValidatorBreakException;
import com.aoshi.service.base.AsBaseService;
import com.aoshi.util.CommonUtils;
import com.aoshi.util.Conditions;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * 后台 [消息] Service
 * 
 * @author yangyanchao
 * @date 2016年10月18日
 */
@Service
public class MessageService extends AsBaseService {

	private final static String PAGE_PATH = "manage/yp/message/";

	@Autowired
	private AsUserMapper asUserMapper;

	@Autowired
	private AsYpSysMessageMapper asYpSysMessageMapper;

	@Autowired
	private AsYpSysMessageRecordMapper asYpSysMessageRecordMapper;

	/**
	 * 页面跳转控制
	 * 
	 * @author yangyanchao
	 * @date 2016年10月18日
	 * @param c
	 * @return
	 */
	public Object page(BaseController c) {

		initialized(c);

		OperaEnum ACTION = OperaEnum.get(pd
				.getParaForPositiveInteger(ApiParam.ACTION));

		switch (ACTION) {

		case ADD:
			break;

		case QUERY:

			int sysMessageId = pd.getParaForPositiveInteger("sysMessageId");

			AsYpSysMessageRecord record = (AsYpSysMessageRecord) asYpSysMessageRecordMapper
					.findByMsgId(Conditions.newInstance()
							.putData("sysMessageId", sysMessageId)
							.putData("userId", getUser().getNewUserId()));
			if (record == null) {
				record = new AsYpSysMessageRecord();
				String userId = getUser().getNewUserId();
				record.setCreateTime(CommonUtils.getCurDate());
				record.setSysMessageId(sysMessageId);
				record.setUserId(Integer.parseInt(userId));
				record.setStatus(0);
				operaFlag = asYpSysMessageRecordMapper.insertSelective(record) == 1;
				ValidatorBreakException.NOT_TRUE(operaFlag);
			} else {

				int status = record.getStatus();
				ValidatorBreakException.NOT_TRUE(status == 0);
			}

			AsYpSysMessage message = asYpSysMessageMapper
					.selectByPrimaryKey(sysMessageId);
			ValidatorBreakException.NOT_NULL(message, 1001, "系统繁忙", 1);

			addViewData("pd", message);

			break;

		default:
			ValidatorBreakException.NOT_NULL(null, 1001, "系统繁忙", 1);
		}

		addViewData("action", ACTION.getId());

		return renderView(PAGE_PATH + "save");
	}

	/**
	 * 编辑消息
	 * 
	 * @author yangyanchao
	 * @date 2016年10月18日
	 * @param c
	 * @return
	 */
	public Object opera(BaseController c) {

		initialized(c);

		OperaEnum ACTION = OperaEnum.get(pd
				.getParaForPositiveInteger(ApiParam.ACTION));

		switch (ACTION) {

		case ADD:

			String title = pd.getParaForString("title");
			String descp = pd.getParaForString("descp");

			Conditions user = (Conditions) asUserMapper
					.findBySysUserId(getUser().getUSER_ID());
			ValidatorBreakException.NOT_NULL(user);

			// 添加消息记录
			AsYpSysMessage message = new AsYpSysMessage();
			message.setCreateTime(CommonUtils.getCurDate());
			message.setDescp(descp);
			message.setTitle(title);
			message.setSendUserId(user.getInt("userId"));
			operaFlag = asYpSysMessageMapper.insertSelective(message) == 1;
			ValidatorBreakException.NOT_TRUE(operaFlag);

			// 添加发布者已读记录
			int messageId = message.getSysMessageId();
			AsYpSysMessageRecord messageRecord = new AsYpSysMessageRecord();
			messageRecord.setSysMessageId(messageId);
			messageRecord.setUserId(user.getInt("userId"));
			messageRecord.setCreateTime(CommonUtils.getCurDate());
			operaFlag = asYpSysMessageRecordMapper
					.insertSelective(messageRecord) == 1;
			ValidatorBreakException.NOT_TRUE(operaFlag);

			break;

		case DELETE:

			int sysMessageId = pd.getParaForPositiveInteger("sysMessageId");
			AsYpSysMessageRecord record = (AsYpSysMessageRecord) asYpSysMessageRecordMapper
					.findByMsgId(Conditions.newInstance()
							.putData("sysMessageId", sysMessageId)
							.putData("userId", getUser().getNewUserId()));
			if (record == null) {
				record = new AsYpSysMessageRecord();
				String userId = getUser().getNewUserId();
				record.setCreateTime(CommonUtils.getCurDate());
				record.setSysMessageId(sysMessageId);
				record.setUserId(Integer.parseInt(userId));
				record.setStatus(1);
				operaFlag = asYpSysMessageRecordMapper.insertSelective(record) == 1;
				ValidatorBreakException.NOT_TRUE(operaFlag);
			} else {

				int status = record.getStatus();
				ValidatorBreakException.NOT_TRUE(status == 0);
				record.setStatus(1);
				operaFlag = asYpSysMessageRecordMapper
						.updateByPrimaryKeySelective(record) == 1;
				ValidatorBreakException.NOT_TRUE(operaFlag);
			}

			break;

		default:
			ValidatorBreakException.NOT_NULL(null);
		}

		return renderSuccess();
	}

	/**
	 * 查询所有消息 后台菜单权限用
	 *
	 * @author yangyanchao
	 * @date 2016年10月24日
	 * @param c
	 * @return
	 */
	public Object getAllMessageList(BaseController c) {

		initialized(c);

		String userId = getUser().getNewUserId();

		pd.put("userId", userId);
		List<Object> msgList = pageQueryModule(asYpSysMessageMapper,
				"getAllMessageList", true);

		addViewData("list", msgList);

		return renderView(PAGE_PATH + "listAll");
	}

	/**
	 * 查询所有消息 所有用户可以使用
	 *
	 * @author yangyanchao
	 * @date 2016年10月24日
	 * @return
	 */
	public Object getAllMessageListAll(BaseController c) {

		initialized(c);

		String userId = getUser().getNewUserId();

		pd.put("userId", userId);
		List<Object> msgList = pageQueryModule(asYpSysMessageMapper,
				"getAllMessageList", true);

		//权限控制
		if (StringUtils.isNotBlank(getUser().getROLE_ID())) {
			addViewData("roleId", getUser().getROLE_ID().equals("1")?"1":"0");
		}
		addViewData("list", msgList);

		return renderView(PAGE_PATH + "messageListAll");
	}


}
